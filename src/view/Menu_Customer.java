/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;

import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Cart;
import model.DAO.CartDAO;
import model.DAO.ProductDAO;
import model.DAO.UserDAO;
import model.User;
import java.sql.SQLException;
import javax.swing.SpinnerNumberModel;
import model.Product;

/**
 *
 * @author truongmanhtuan
 */
public class Menu_Customer extends javax.swing.JFrame {
    private int x = 300;    //chieu rong Menu
    private int y = 700;    //chieu cao Menu
    private String fullName;
    private String userId;
    private String userName;
    private double total;
    private boolean isLogin = false;

    public Menu_Customer() throws SQLException {
        initComponents();
        displayProductData();
        setTitle("Menu");
        isLogin = false;
    }
    public Menu_Customer(String userId, String fullName,String userName) throws SQLException {
        initComponents();
        setTitle("Menu");
        this.userName = userName;
        this.userId = userId;
        this.fullName = fullName;
        jlb_hello.setText("Hello, " + fullName);
        displayProductData();
        displayCartData();
        this.isLogin = true;   
        System.out.println(userId+" "+userName+" "+ fullName);
    }
   
    public void openMenu() {
        jplSlideMenu.setSize(x, y);
        if (x == 0) {
            new Thread(new Runnable() {
                @Override
                public void run() {
                    try {
                        for (int i = 0; i <= 300; i++) {
                            jplSlideMenu.setSize(i, y);
                            Thread.sleep(1);
                        }
                    } catch (Exception e) {
                    }
                }
            }).start();
            x = 300;
        }
    }

    public void closeMenu() {
        jplSlideMenu.setSize(x, y);
        if (x == 300) {
            new Thread(new Runnable() {
                @Override
                public void run() {
                    try {
                        for (int i = 300; i >= 0; i--) {
                            jplSlideMenu.setSize(i, y);
                            Thread.sleep(2);
                        }
                    } catch (Exception e) {
                    }
                }
            }).start();
            x = 0;
        }
    }
    /**
     * Creates new form Menu_Customer
     */
   

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jplSlideMenu = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        lblCloseMenu = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jlb_hello = new javax.swing.JLabel();
        jLb_home = new javax.swing.JLabel();
        jLb_Account = new javax.swing.JLabel();
        jLb_cart = new javax.swing.JLabel();
        jLb_setting = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLb_help = new javax.swing.JLabel();
        jLb_introduce = new javax.swing.JLabel();
        jLb_logout = new javax.swing.JLabel();
        jpllMenuBar = new javax.swing.JPanel();
        lblOpenMenu = new javax.swing.JLabel();
        jplTitle = new javax.swing.JPanel();
        jplMain = new javax.swing.JPanel();
        cart_home = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table_showProduct = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLb_search = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txt_search = new javax.swing.JTextField();
        btn_addToCart = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        txt_quatitytoadd = new javax.swing.JSpinner();
        txt_refresh = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        cart_cart = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        table_showCart = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txt_total = new javax.swing.JLabel();
        txt_setOfQuantity = new javax.swing.JSpinner();
        jLabel3 = new javax.swing.JLabel();
        btn_updateProduct = new javax.swing.JButton();
        btn_order = new javax.swing.JButton();
        btn_delete = new javax.swing.JButton();
        cart_orders = new javax.swing.JPanel();
        cart_setting = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        txt_userName3 = new javax.swing.JLabel();
        jLabel48 = new javax.swing.JLabel();
        txt_fullname3 = new javax.swing.JTextField();
        jLabel49 = new javax.swing.JLabel();
        jLabel50 = new javax.swing.JLabel();
        txt_email3 = new javax.swing.JTextField();
        jLabel51 = new javax.swing.JLabel();
        txt_numberphone3 = new javax.swing.JTextField();
        txt_address3 = new javax.swing.JTextField();
        jLabel52 = new javax.swing.JLabel();
        jLabel53 = new javax.swing.JLabel();
        txt_gender3 = new javax.swing.JTextField();
        txt_dateofbirth3 = new javax.swing.JTextField();
        jLabel54 = new javax.swing.JLabel();
        btn_updateUser3 = new javax.swing.JButton();
        jLabel56 = new javax.swing.JLabel();
        jLabel55 = new javax.swing.JLabel();
        txt_password3 = new javax.swing.JPasswordField();
        txt_confpassword = new javax.swing.JPasswordField();
        jPanel3 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setPreferredSize(new java.awt.Dimension(1200, 700));
        jPanel1.setSize(new java.awt.Dimension(1200, 0));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jplSlideMenu.setBackground(new java.awt.Color(255, 255, 255));
        jplSlideMenu.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jplSlideMenu.setPreferredSize(new java.awt.Dimension(190, 590));
        jplSlideMenu.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lblCloseMenu.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        lblCloseMenu.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblCloseMenu.setText("X");
        lblCloseMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblCloseMenuMouseClicked(evt);
            }
        });

        jLabel13.setIcon(new javax.swing.ImageIcon("/Users/truongmanhtuan/NetBeansProjects/Store_Management_App/images/background/store.png")); // NOI18N

        jLabel14.setFont(new java.awt.Font("American Typewriter", 1, 18)); // NOI18N
        jLabel14.setText("SPORT SHOP ");

        jlb_hello.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(89, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addGap(97, 97, 97))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(lblCloseMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jlb_hello)
                        .addGap(75, 75, 75))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel14)
                        .addGap(86, 86, 86))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(lblCloseMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel14)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addComponent(jlb_hello))
        );

        jplSlideMenu.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 300, 200));

        jLb_home.setBackground(new java.awt.Color(255, 255, 255));
        jLb_home.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLb_home.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLb_home.setText("Home");
        jLb_home.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLb_homeMouseClicked(evt);
            }
        });
        jplSlideMenu.add(jLb_home, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 230, 300, 30));

        jLb_Account.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLb_Account.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLb_Account.setText("Account");
        jLb_Account.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLb_AccountMouseClicked(evt);
            }
        });
        jplSlideMenu.add(jLb_Account, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 270, 300, 30));

        jLb_cart.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLb_cart.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLb_cart.setText("Shopping Cart");
        jLb_cart.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLb_cartMouseClicked(evt);
            }
        });
        jplSlideMenu.add(jLb_cart, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 310, 300, 30));

        jLb_setting.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLb_setting.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLb_setting.setText("Setting");
        jLb_setting.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLb_settingMouseClicked(evt);
            }
        });
        jplSlideMenu.add(jLb_setting, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 350, 300, 30));
        jplSlideMenu.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 530, 300, 10));

        jLb_help.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLb_help.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLb_help.setText("Help");
        jplSlideMenu.add(jLb_help, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 560, 300, 30));

        jLb_introduce.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLb_introduce.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLb_introduce.setText("Introduce");
        jplSlideMenu.add(jLb_introduce, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 600, 300, 30));

        jLb_logout.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLb_logout.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLb_logout.setText("Logout");
        jLb_logout.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLb_logoutMouseClicked(evt);
            }
        });
        jplSlideMenu.add(jLb_logout, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 640, 300, 30));

        jPanel1.add(jplSlideMenu, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 30, 0, 700));

        jpllMenuBar.setBackground(new java.awt.Color(255, 255, 255));

        lblOpenMenu.setIcon(new javax.swing.ImageIcon("/Users/truongmanhtuan/NetBeansProjects/Store_Management_App/images/icons/menu_icon_16.png")); // NOI18N
        lblOpenMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblOpenMenuMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jpllMenuBarLayout = new javax.swing.GroupLayout(jpllMenuBar);
        jpllMenuBar.setLayout(jpllMenuBarLayout);
        jpllMenuBarLayout.setHorizontalGroup(
            jpllMenuBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpllMenuBarLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(lblOpenMenu)
                .addContainerGap(1161, Short.MAX_VALUE))
        );
        jpllMenuBarLayout.setVerticalGroup(
            jpllMenuBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpllMenuBarLayout.createSequentialGroup()
                .addContainerGap(24, Short.MAX_VALUE)
                .addComponent(lblOpenMenu)
                .addGap(20, 20, 20))
        );

        jPanel1.add(jpllMenuBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 30, 1200, 60));

        jplTitle.setBackground(new java.awt.Color(0, 102, 102));

        javax.swing.GroupLayout jplTitleLayout = new javax.swing.GroupLayout(jplTitle);
        jplTitle.setLayout(jplTitleLayout);
        jplTitleLayout.setHorizontalGroup(
            jplTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1200, Short.MAX_VALUE)
        );
        jplTitleLayout.setVerticalGroup(
            jplTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 30, Short.MAX_VALUE)
        );

        jPanel1.add(jplTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1200, 30));

        jplMain.setBackground(new java.awt.Color(255, 255, 255));
        jplMain.setLayout(new java.awt.CardLayout());

        table_showProduct.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product Id", "Name", "Description", "Price", "Quantity In Stock", "Category", "Brand", "Status"
            }
        ));
        jScrollPane1.setViewportView(table_showProduct);

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 102, 102));
        jLabel1.setText("Home");

        jLb_search.setIcon(new javax.swing.ImageIcon("/Users/truongmanhtuan/NetBeansProjects/Store_Management_App/images/icons/search_icons_24.png")); // NOI18N
        jLb_search.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLb_searchMouseClicked(evt);
            }
        });

        jLabel4.setIcon(new javax.swing.ImageIcon("/Users/truongmanhtuan/NetBeansProjects/Store_Management_App/images/background/store.png")); // NOI18N

        btn_addToCart.setBackground(new java.awt.Color(0, 102, 102));
        btn_addToCart.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        btn_addToCart.setForeground(new java.awt.Color(255, 255, 255));
        btn_addToCart.setText("Add to cart");
        btn_addToCart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_addToCartActionPerformed(evt);
            }
        });

        txt_quatitytoadd.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));

        txt_refresh.setBackground(new java.awt.Color(0, 102, 102));
        txt_refresh.setForeground(new java.awt.Color(255, 255, 255));
        txt_refresh.setText("Load");
        txt_refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_refreshActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Helvetica Neue", 0, 11)); // NOI18N
        jLabel7.setText("Click to refresh cart");

        javax.swing.GroupLayout cart_homeLayout = new javax.swing.GroupLayout(cart_home);
        cart_home.setLayout(cart_homeLayout);
        cart_homeLayout.setHorizontalGroup(
            cart_homeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cart_homeLayout.createSequentialGroup()
                .addGroup(cart_homeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(cart_homeLayout.createSequentialGroup()
                        .addGroup(cart_homeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, cart_homeLayout.createSequentialGroup()
                                .addGap(100, 100, 100)
                                .addComponent(jLabel4))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, cart_homeLayout.createSequentialGroup()
                                .addGap(16, 16, 16)
                                .addGroup(cart_homeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(cart_homeLayout.createSequentialGroup()
                                        .addComponent(jLb_search, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txt_search, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, cart_homeLayout.createSequentialGroup()
                                        .addComponent(jLabel8)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(cart_homeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txt_quatitytoadd, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel7))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(cart_homeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txt_refresh, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(btn_addToCart, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(cart_homeLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 892, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        cart_homeLayout.setVerticalGroup(
            cart_homeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, cart_homeLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(cart_homeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(cart_homeLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 570, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(7, Short.MAX_VALUE))
                    .addGroup(cart_homeLayout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(34, 34, 34)
                        .addGroup(cart_homeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txt_search, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLb_search, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(27, 27, 27)
                        .addGroup(cart_homeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addGroup(cart_homeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(btn_addToCart, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txt_quatitytoadd, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(34, 34, 34)
                        .addGroup(cart_homeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txt_refresh, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        jplMain.add(cart_home, "card2");

        table_showCart.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product Id", "Name", "Price", "Quantity ", "Total"
            }
        ));
        jScrollPane2.setViewportView(table_showCart);

        jLabel2.setIcon(new javax.swing.ImageIcon("/Users/truongmanhtuan/NetBeansProjects/Store_Management_App/images/icons/cart_icon_100.png")); // NOI18N

        jLabel5.setFont(new java.awt.Font("Helvetica Neue", 1, 36)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 102, 102));
        jLabel5.setText("Cart");

        txt_total.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        txt_total.setText("Total amount: ");

        txt_setOfQuantity.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));

        jLabel3.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jLabel3.setText("Set of quantity:");

        btn_updateProduct.setBackground(new java.awt.Color(0, 102, 102));
        btn_updateProduct.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        btn_updateProduct.setForeground(new java.awt.Color(255, 255, 255));
        btn_updateProduct.setText("Update");
        btn_updateProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_updateProductActionPerformed(evt);
            }
        });

        btn_order.setBackground(new java.awt.Color(0, 102, 102));
        btn_order.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        btn_order.setForeground(new java.awt.Color(255, 255, 255));
        btn_order.setText("Order");
        btn_order.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_orderActionPerformed(evt);
            }
        });

        btn_delete.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        btn_delete.setForeground(new java.awt.Color(255, 51, 51));
        btn_delete.setText("Delete");
        btn_delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_deleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout cart_cartLayout = new javax.swing.GroupLayout(cart_cart);
        cart_cart.setLayout(cart_cartLayout);
        cart_cartLayout.setHorizontalGroup(
            cart_cartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, cart_cartLayout.createSequentialGroup()
                .addGroup(cart_cartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(cart_cartLayout.createSequentialGroup()
                        .addGap(109, 109, 109)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(cart_cartLayout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(jLabel6))
                    .addGroup(cart_cartLayout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addGroup(cart_cartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txt_total)
                            .addGroup(cart_cartLayout.createSequentialGroup()
                                .addGroup(cart_cartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel3)
                                    .addComponent(btn_delete, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(27, 27, 27)
                                .addGroup(cart_cartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txt_setOfQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btn_order, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btn_updateProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 81, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 840, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14))
            .addGroup(cart_cartLayout.createSequentialGroup()
                .addGap(540, 540, 540)
                .addComponent(jLabel5)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        cart_cartLayout.setVerticalGroup(
            cart_cartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, cart_cartLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(cart_cartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(cart_cartLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(40, 40, 40)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_total)
                        .addGap(34, 34, 34)
                        .addGroup(cart_cartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txt_setOfQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(18, 18, 18)
                        .addGroup(cart_cartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btn_updateProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btn_delete, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(btn_order, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 569, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15))
        );

        jplMain.add(cart_cart, "card4");

        javax.swing.GroupLayout cart_ordersLayout = new javax.swing.GroupLayout(cart_orders);
        cart_orders.setLayout(cart_ordersLayout);
        cart_ordersLayout.setHorizontalGroup(
            cart_ordersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1200, Short.MAX_VALUE)
        );
        cart_ordersLayout.setVerticalGroup(
            cart_ordersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 640, Short.MAX_VALUE)
        );

        jplMain.add(cart_orders, "card5");

        cart_setting.setBackground(new java.awt.Color(255, 255, 255));

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));

        txt_userName3.setText("Username");

        jLabel48.setText("Password");

        txt_fullname3.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N

        jLabel49.setText("FullName");

        jLabel50.setText("Email");

        txt_email3.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N

        jLabel51.setText("PhoneNumber");

        txt_numberphone3.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N

        txt_address3.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N

        jLabel52.setText("Address");

        jLabel53.setText("Gender");

        txt_gender3.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N

        txt_dateofbirth3.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N

        jLabel54.setText("DateOfBirth");

        btn_updateUser3.setBackground(new java.awt.Color(0, 102, 102));
        btn_updateUser3.setForeground(new java.awt.Color(255, 255, 255));
        btn_updateUser3.setText("Update");
        btn_updateUser3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_updateUser3btn_updateUserActionPerformed(evt);
            }
        });

        jLabel56.setIcon(new javax.swing.ImageIcon("/Users/truongmanhtuan/NetBeansProjects/Store_Management_App/images/icons/user_icon_128.png")); // NOI18N

        jLabel55.setText("Conf Password");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(127, 127, 127)
                .addComponent(btn_updateUser3, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txt_userName3)
                    .addComponent(jLabel48)
                    .addComponent(jLabel49)
                    .addComponent(jLabel50)
                    .addComponent(jLabel51)
                    .addComponent(jLabel52)
                    .addComponent(jLabel53)
                    .addComponent(jLabel54)
                    .addComponent(jLabel55))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel56)
                    .addComponent(txt_gender3, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txt_address3, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txt_numberphone3, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txt_email3, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txt_fullname3, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txt_dateofbirth3, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txt_password3, javax.swing.GroupLayout.DEFAULT_SIZE, 240, Short.MAX_VALUE)
                    .addComponent(txt_confpassword))
                .addGap(15, 15, 15))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jLabel56)
                .addGap(35, 35, 35)
                .addComponent(txt_userName3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel48)
                    .addComponent(txt_password3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel55)
                    .addComponent(txt_confpassword, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(jLabel49))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(txt_fullname3, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)))
                .addGap(12, 12, 12)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel50)
                    .addComponent(txt_email3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_numberphone3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel51))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel52)
                    .addComponent(txt_address3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel53)
                    .addComponent(txt_gender3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel54)
                    .addComponent(txt_dateofbirth3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addComponent(btn_updateUser3, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(129, 129, 129))
        );

        jPanel3.setBackground(new java.awt.Color(0, 102, 102));

        jLabel10.setIcon(new javax.swing.ImageIcon("/Users/truongmanhtuan/NetBeansProjects/Store_Management_App/images/background/store_200.png")); // NOI18N

        jLabel12.setFont(new java.awt.Font("American Typewriter", 1, 40)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("SHOP ONLINE");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(286, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addGap(292, 292, 292))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addGap(237, 237, 237))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(179, 179, 179)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel12)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout cart_settingLayout = new javax.swing.GroupLayout(cart_setting);
        cart_setting.setLayout(cart_settingLayout);
        cart_settingLayout.setHorizontalGroup(
            cart_settingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cart_settingLayout.createSequentialGroup()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        cart_settingLayout.setVerticalGroup(
            cart_settingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, cart_settingLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(cart_settingLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jplMain.add(cart_setting, "card5");

        jPanel1.add(jplMain, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 90, 1200, 640));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void lblCloseMenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblCloseMenuMouseClicked
        closeMenu();
    }//GEN-LAST:event_lblCloseMenuMouseClicked

    private void jLb_homeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLb_homeMouseClicked
        try {
            closeMenu();
            cart_home.setVisible(true);
            cart_cart.setVisible(false);
            cart_setting.setVisible(false);
            displayProductData();
        } catch (SQLException ex) {
            Logger.getLogger(Menu_Customer.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jLb_homeMouseClicked

    private void jLb_AccountMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLb_AccountMouseClicked
        if(!isLogin){
            LoginFrame loginFrame =new LoginFrame();
            loginFrame.setVisible(true);
            loginFrame.pack();
            loginFrame.setLocationRelativeTo(null);
            this.dispose();
        }
    }//GEN-LAST:event_jLb_AccountMouseClicked

    private void jLb_cartMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLb_cartMouseClicked
        if (isLogin) {
            closeMenu();
            cart_cart.setVisible(true);
            cart_home.setVisible(false);
            cart_setting.setVisible(false);
            try {
                displayCartData();
            } catch (SQLException ex) {
                Logger.getLogger(Menu_Customer.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please login to access the cart.", "Login Required", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jLb_cartMouseClicked

    private void jLb_settingMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLb_settingMouseClicked
        if(isLogin){
            closeMenu();
            cart_setting.setVisible(true);
            cart_home.setVisible(false);
            cart_cart.setVisible(false);
            cart_orders.setVisible(false);
            try {
                UserDAO userDAO = new UserDAO();
                String username = this.userName;           
                User user = userDAO.readUser(username);
                if (user != null) {
                    txt_userName3.setText("UserName: "+user.getUserName());
                    txt_fullname3.setText(user.getFullName());
                    txt_email3.setText(user.getEmail());
                    txt_numberphone3.setText(user.getPhoneNumber());
                    txt_address3.setText(user.getAddress());
                    txt_gender3.setText(user.getGender());
                    txt_dateofbirth3.setText(user.getDateOfBirth());
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this,"An error occurred while fetching user data: " + e.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
            }
        }else {
            JOptionPane.showMessageDialog(this, "Please log in to access settings.", "Login Required", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jLb_settingMouseClicked

    private void jLb_logoutMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLb_logoutMouseClicked
        if (isLogin) {
            this.dispose();
            isLogin = false;
            JOptionPane.showMessageDialog(this, "You have logged out successfully.", "Logout", JOptionPane.INFORMATION_MESSAGE);
            try {
                Menu_Customer menuCustomer = new Menu_Customer();
                menuCustomer.setVisible(true);
                menuCustomer.setLocationRelativeTo(null);
            } catch (SQLException ex) {
                Logger.getLogger(Menu_Customer.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(this, "You are not logged in.", "Login Required", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jLb_logoutMouseClicked

    private void lblOpenMenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblOpenMenuMouseClicked
        openMenu();
    }//GEN-LAST:event_lblOpenMenuMouseClicked

    private void jLb_searchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLb_searchMouseClicked
        try {
            String search = txt_search.getText().trim();
            ProductDAO productDAO = new ProductDAO();
            String[][] products;

            if (search.isEmpty()) {
                products = productDAO.readProductsTableData();
            } else {
                products = productDAO.searchProducts(search);
            }
            DefaultTableModel model = new DefaultTableModel(products,
                new String[]{"ProductId", "Name", "Description", "Price", "Quantity In Stock", "Category", "Brand", "Status"}) {
                @Override
                // Không cho phép chỉnh sửa bất kỳ ô nào
                public boolean isCellEditable(int row, int column) {
                    return false;
                }
            };
            table_showProduct.setModel(model);
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jLb_searchMouseClicked

    private void btn_addToCartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_addToCartActionPerformed
        if (isLogin) {
            int selectedRow = table_showProduct.getSelectedRow();
            if (selectedRow != -1) {
                try {
                    String productId = table_showProduct.getValueAt(selectedRow, 0).toString();
                    String productName = table_showProduct.getValueAt(selectedRow, 1).toString();
                    double price = Double.parseDouble(table_showProduct.getValueAt(selectedRow, 3).toString());
                    String status = table_showProduct.getValueAt(selectedRow, 7).toString();
                    int quantityToAdd = (int) txt_quatitytoadd.getValue();
                    
                    if (!status.equalsIgnoreCase("Instock")) {
                        JOptionPane.showMessageDialog(this, "Product is not available for sale.", "Product Unavailable", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                    //Lấy số lượn trong kho shop
                    ProductDAO productDAO = new ProductDAO();
                    int quantityInStock = productDAO.getQuantityInStock(productId);
                    //Lấy số lượng sản phẩm đã có trong giỏ hàng                   
                    CartDAO cartDAO = new CartDAO();
                    Cart cart = cartDAO.getCartByUserId(userId); // Lấy giỏ hàng của người dùng
                    int quantityInCart = cartDAO.getProductQuantityInCart(cart.getCartId(), productId);                   
                    // Tính số lượng còn lại có thể thêm vào giỏ hàng
                    int availableQuantity = quantityInStock - quantityInCart;
                    // Nếu số lượng muốn thêm lớn hơn số lượng có thể thêm, chỉ cho phép thêm tối đa số lượng còn lại
                    if (quantityToAdd > availableQuantity) {
                        quantityToAdd = availableQuantity;
                        JOptionPane.showMessageDialog(this, "Can only add up to " + availableQuantity + " add to cart.", "Error", JOptionPane.ERROR_MESSAGE);
                        txt_quatitytoadd.setValue(1);
                    }else{
                        boolean success = cartDAO.addProductToCart(cart.getCartId(), productId, quantityToAdd);
                        if (success) {
                            double totalPrice = cartDAO.calculateTotalPrice(cart.getCartId());
                            cartDAO.updateTotalPrice(cart.getCartId(), totalPrice);
                            JOptionPane.showMessageDialog(this, "Product has been added to cart", "Success", JOptionPane.INFORMATION_MESSAGE);
                            txt_quatitytoadd.setValue(1);
                        } else {
                            JOptionPane.showMessageDialog(this, "Cannot add product to cart", "Error", JOptionPane.ERROR_MESSAGE);                           
                        }
                    }

                } catch (SQLException ex) {
                    Logger.getLogger(Menu_Customer.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Please select products to add to cart", "No products selected yet", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please login to add to cart.", "Login required", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btn_addToCartActionPerformed

    private void txt_refreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_refreshActionPerformed
        try {
            displayProductData();
        } catch (SQLException ex) {
            Logger.getLogger(Menu_Customer.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_txt_refreshActionPerformed

    private void btn_updateProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_updateProductActionPerformed
        try {                                                  
            int selectedRow = table_showCart.getSelectedRow();
            if (selectedRow == -1) {
                JOptionPane.showMessageDialog(this, "Please select a product to update!", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            String productId = table_showCart.getValueAt(selectedRow, 0).toString();
            String userId = this.userId;
            int updateQuantity = (int) txt_setOfQuantity.getValue();           
            // Lấy số lượng có sẵn trong kho cho sản phẩm
            ProductDAO productDAO = new ProductDAO();
            int quantityInStock = productDAO.getQuantityInStock(productId);         
            // Kiểm tra nếu số lượng muốn cập nhật lớn hơn số lượng có trong kho
            if (updateQuantity > quantityInStock) {
                JOptionPane.showMessageDialog(this, "Cannot update quantity. Only " + quantityInStock + " items are in stock.", "Error", JOptionPane.ERROR_MESSAGE);
                txt_setOfQuantity.setValue(1); 
                return;
            }           
            try {
                CartDAO cartDAO = new CartDAO();               
                // Cập nhật số lượng sản phẩm trong giỏ
                boolean isUpdated = cartDAO.updateProductQuantity(userId, productId, updateQuantity);               
                if (isUpdated) {
                    JOptionPane.showMessageDialog(this, "Quantity updated successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
                    displayCartData();  
                    txt_setOfQuantity.setValue(1); 
                } else {
                    JOptionPane.showMessageDialog(this, "Failed to update quantity!", "Error", JOptionPane.ERROR_MESSAGE);                    
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Database error occurred!", "Error", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
            }
        } catch (SQLException ex) {
            Logger.getLogger(Menu_Customer.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btn_updateProductActionPerformed

    private void btn_orderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_orderActionPerformed
        try {
            UserDAO userDAO = new UserDAO();
            CartDAO cartDAO = new CartDAO();
            ProductDAO productDAO = new ProductDAO();
            String username = this.userName;

            if (username.isEmpty()) {
                JOptionPane.showMessageDialog(this,"Username cannot be empty!", "Validation Error", JOptionPane.WARNING_MESSAGE);
                return;
            }

            User user = userDAO.readUser(username);
            if (user != null) {
                // Hiển thị thông tin đơn hàng
                JOptionPane.showMessageDialog(this, "Order Information:\n" + "Order ID: " + user.getUserId() + "\n" + "Full Name: " + user.getFullName() + "\n" + "Phone: " + user.getPhoneNumber() + "\n" + "Address: " + user.getAddress() + "\n" + "Total Amount: " + String.format("%.2f", total) + "\n" + "Please click confirm!", "Order Details", JOptionPane.INFORMATION_MESSAGE);
                // Đọc dữ liệu giỏ hàng
                String[][] cartData = cartDAO.readCartTableData(userId);
                boolean stockUpdated = true;
                for (String[] item : cartData) {
                    String productId = item[0];
                    int quantityOrdered = Integer.parseInt(item[3]);
                    // Đọc sản phẩm từ database
                    Product product = productDAO.readProductId(productId);
                    if (product != null) {
                        int quantityInStock = product.getQuantityInStock();
                        // Kiểm tra tồn kho
                        if (quantityOrdered > quantityInStock) {JOptionPane.showMessageDialog(this, "Not enough stock for product: " + product.getName(), "Stock Error", JOptionPane.ERROR_MESSAGE); 
                            stockUpdated = false;
                            break;
                        } else {
                            // Giảm số lượng tồn kho
                            product.setQuantityInStock(quantityInStock - quantityOrdered);
                            if (!productDAO.updateQuantity(product)) {
                                JOptionPane.showMessageDialog(this, "Failed to update stock for product: " + product.getName(), "Update Error", JOptionPane.ERROR_MESSAGE);
                                stockUpdated = false;
                                break;
                            }
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Product not found: " + productId, "Error", JOptionPane.ERROR_MESSAGE);
                        stockUpdated = false;
                        break;
                    }
                }

                if (stockUpdated) {
                    // Xóa giỏ hàng
                    if (cartDAO.clearCart(user.getUserId())) {
                        displayCartData();
                        JOptionPane.showMessageDialog(this, "Order placed successfully !", "Order Success", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(this, "Failed to clear the cart. Please try again.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "User not found. Please check the username.", "User Not Found", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "An error occurred while processing the order: " + e.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }//GEN-LAST:event_btn_orderActionPerformed

    private void btn_deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_deleteActionPerformed
        int selectedRow = table_showCart.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a product to delete!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        String productId = table_showCart.getValueAt(selectedRow, 0).toString();
        String userId = this.userId;
        int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to remove this product from the cart?", "Confirm Deletion", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            try {
                CartDAO cartDAO = new CartDAO();
                boolean isDeleted = cartDAO.deleteProductCart(userId, productId);
                if (isDeleted) {
                    JOptionPane.showMessageDialog(this, "Product removed from cart successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
                    displayCartData();
                } else {
                    JOptionPane.showMessageDialog(this, "Failed to remove product from cart!", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Database error occurred!", "Error", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_btn_deleteActionPerformed

    private void btn_updateUser3btn_updateUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_updateUser3btn_updateUserActionPerformed
        String password = new String(txt_password3.getPassword());
        String confpassword = new String(txt_confpassword.getPassword());
        String fullName = txt_fullname3.getText().trim();
        String phoneNumber = txt_numberphone3.getText();
        String email = txt_email3.getText();
        String address = txt_address3.getText();
        String gender = txt_gender3.getText();
        String dateOfBirth = txt_dateofbirth3.getText();

        if (!password.equals(confpassword)) {
            JOptionPane.showMessageDialog(this, "Password doesn't match!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        User user = new User(userName, password, fullName, email, phoneNumber, address, gender, dateOfBirth);
        try {
            UserDAO userDAO = new UserDAO();
            if (userDAO.updateUser(user)) {
                JOptionPane.showMessageDialog(this, "User updated successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "Failed to update user!", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Database error!", "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }//GEN-LAST:event_btn_updateUser3btn_updateUserActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_addToCart;
    private javax.swing.JButton btn_delete;
    private javax.swing.JButton btn_order;
    private javax.swing.JButton btn_updateProduct;
    private javax.swing.JButton btn_updateUser3;
    private javax.swing.JPanel cart_cart;
    private javax.swing.JPanel cart_home;
    private javax.swing.JPanel cart_orders;
    private javax.swing.JPanel cart_setting;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel54;
    private javax.swing.JLabel jLabel55;
    private javax.swing.JLabel jLabel56;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLb_Account;
    private javax.swing.JLabel jLb_cart;
    private javax.swing.JLabel jLb_help;
    private javax.swing.JLabel jLb_home;
    private javax.swing.JLabel jLb_introduce;
    private javax.swing.JLabel jLb_logout;
    private javax.swing.JLabel jLb_search;
    private javax.swing.JLabel jLb_setting;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel jlb_hello;
    private javax.swing.JPanel jplMain;
    private javax.swing.JPanel jplSlideMenu;
    private javax.swing.JPanel jplTitle;
    private javax.swing.JPanel jpllMenuBar;
    private javax.swing.JLabel lblCloseMenu;
    private javax.swing.JLabel lblOpenMenu;
    private javax.swing.JTable table_showCart;
    private javax.swing.JTable table_showProduct;
    private javax.swing.JTextField txt_address3;
    private javax.swing.JPasswordField txt_confpassword;
    private javax.swing.JTextField txt_dateofbirth3;
    private javax.swing.JTextField txt_email3;
    private javax.swing.JTextField txt_fullname3;
    private javax.swing.JTextField txt_gender3;
    private javax.swing.JTextField txt_numberphone3;
    private javax.swing.JPasswordField txt_password3;
    private javax.swing.JSpinner txt_quatitytoadd;
    private javax.swing.JButton txt_refresh;
    private javax.swing.JTextField txt_search;
    private javax.swing.JSpinner txt_setOfQuantity;
    private javax.swing.JLabel txt_total;
    private javax.swing.JLabel txt_userName3;
    // End of variables declaration//GEN-END:variables
    private void displayProductData() throws SQLException {
        ProductDAO productDAO = new ProductDAO();
        try {
            String[][] products = productDAO.readProductsTableData();
            DefaultTableModel model = new DefaultTableModel(products, 
                new String[] {"ProductId", "Name", "Description", "Price", "Quantity In Stock", "Category", "Brand", "Status"}) {
                @Override
                 // Không cho phép chỉnh sửa bất kỳ ô nào
                public boolean isCellEditable(int row, int column) {
                    return false;
                }
            };
            table_showProduct.setModel(model);
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    
    private void displayCartData() throws SQLException {
        CartDAO cartDAO = new CartDAO();
        try {
            String[][] cartData = cartDAO.readCartTableData(userId);
            total = 0.0;
            for (String[] row : cartData) {
                total += Double.parseDouble(row[4]); 
            }
            DefaultTableModel model = new DefaultTableModel(cartData, 
                new String[] {"ProductId", "Name", "Price", "Quantity", "Total"}) {
                @Override
                 // Không cho phép chỉnh sửa bất kỳ ô nào
                public boolean isCellEditable(int row, int column) {
                    return false; 
                }
            };
            table_showCart.setModel(model);
            txt_total.setText("Total amount: "+String.format("%.2f", total)+" dong");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}
